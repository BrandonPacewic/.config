global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

snippet beg "Begin End Block" bA
\begin{$1}
    ${2:${VISUAL}}
\end{$1}$0
endsnippet

snippet chapt "Chapter" b
\chapter{$1}$0
endsnippet

snippet sec "Section" b
\section{$1}$0
endsnippet

snippet subsec "Subsection" b
\subsection{$1}$0
endsnippet

snippet subsubsec "Subsubsection" b
\subsubsection{$1}$0
endsnippet

snippet subf "Subfile" b
\subfile{$1}$0
endsnippet

snippet ftnt "Footnote" w
\footnote{\label{$1}$2}$0
endsnippet

snippet lab "Label" w
\label{$1}$0
endsnippet

snippet ref "Reference Theorem" w
\ref{$1}$0
endsnippet

snippet reft "Reference" w
\textit{$1 (Theorem \ref{$2})}$0
endsnippet

snippet itms "Itemize" bA
\begin{itemize}
    \item ${1}
\end{itemize}${0}
endsnippet

snippet enums "Enumerate" bA
\begin{enumerate}[$1]
    \item ${2}
\end{enumerate}
endsnippet

snippet item "Item" w
\item
endsnippet

snippet ali "Align" w
\begin{align*}
    $1
.\end{align*}$0
endsnippet

snippet def "Definition" w
\begin{definition}[$1]
    $2
\end{definition}$0
endsnippet

snippet theo "Theorem" w
\begin{theorem}[$1]
    $2
\end{theorem}$0
endsnippet

snippet pf "Proof" w
\begin{proof}
    $1
\end{proof}$0
endsnippet

snippet lect "Lecture + Section" w
\begin{lecture}
    \subsubsection{Lecture $1}$0
\end{lecture}
endsnippet

snippet lec "Lecture" w
\begin{lecture}
    $0
\end{lecture}
endsnippet

snippet nt "Note" w
\begin{note}
    $0
\end{note}
endsnippet

snippet rem "Remark" w
\begin{remark}
    $0
\end{remark}
endsnippet

snippet ex "Example" w
\begin{example}
    $1
\end{example}$0
endsnippet

snippet ru "Rule" w
\begin{myrule}
    $1
\end{myrule}$0
endsnippet

snippet bf "Bold" w
\textbf{$1}$0
endsnippet

snippet it "Italic" w
\textit{$1}$0
endsnippet

snippet link "Link" w
\href{${1:Link}}{${2:Text}}$0
endsnippet

snippet graphic "Include Graphic" w
\includegraphics[scale=${1:0.5}]{$2}$0
endsnippet

snippet qna "Question and Answer" w
\begin{enumerate}[Q:]
    \item $1
        \begin{enumerate}[A:]
            \item $2
        \end{enumerate}$0
\end{enumerate}
endsnippet

snippet qs "Question" w
\begin{enumerate}[Q:]
    \item $1
\end{enumerate}$0
endsnippet

snippet ans "Answer" w
\begin{enumerate}[A:]
    \item $1
\end{enumerate}$0
endsnippet

snippet np "New Page" w
\newpage
\pagebreak$0
endsnippet

context "math()"
snippet tat "Text" w
\text{$1}$0
endsnippet

snippet mk "Inline Math" wA
\(${1:${VISUAL}}\)$0
endsnippet

snippet dm "Display Math" wA
\[
    ${1:${VISUAL}}
.\]$0
endsnippet

snippet hsp "hspace" w
\hspace{${1:2}mm}$0
endsnippet

snippet multicol "Multi column" w
\begin{multicols}{${1:2}}
    ${2:${VISUAL}}
\end{multicols}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet ff "Display Fraction" iA
\dfrac{$1}{$2}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "Auto Subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "Auto Subscript 2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet == "Equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "Not Equals" iA
\neq 
endsnippet

context "math()"
snippet sum "Sum" w
\Sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet lim "Limit" w
\Lim_{${1:n} \to ${2:\infty}}$0
endsnippet

priority 100
context "math()"
snippet int "Integral" w
\Int_{${1:a}}^{${2:b}} ${3:f(x)} \, dx$0
endsnippet

priority 1000
context "math()"
snippet dint "Definite Integral" w
\Int ${1:f(x)} \, dx$0
endsnippet

priority 1000
context "math()"
snippet cint "Closed interval" w
[${1:a}, \, ${2:b}]$0
endsnippet

priority 1000
context "math()"
snippet oint "Open interval" w
(${1:a}, \, ${2:b})$0
endsnippet

priority 10000
context "math()"
snippet ocint "Open closed interval" w
(${1:a}, \, ${2:b}]$0
endsnippet

priority 10000
context "math()"
snippet coint "Closed open interval" w
[${1:a}, \, ${2:b})$0
endsnippet

context "math()"
snippet cases "Cases" w
\begin{cases}
    $1 ,& $2 \\\\
    $3 ,& $4 \\\\$5
\end{cases}$0
endsnippet

context "math()"
snippet case "Case" w
$1 ,& $2 \\\\$0
endsnippet

priority 1000
context "math()"
snippet sq "Square Root" i
\sqrt[${1:2}]{${2:${VISUAL}}}$0
endsnippet

priority 10000
context "math()"
snippet 'sqrt\[(\d)\]{(.*)}' "Smart Square Root" wrA
`!p
if match.group(1) == '2':
    snip.rv = 'sqrt{' + match.group(2) + '}'
else:
    snip.rv = 'sqrt[' + match.group(1) + ']{' + match.group(2) + '}'
`
endsnippet

context "math()"
snippet '(f|h|g)\'?(x|t)' "Smart make function" wr
`!p snip.rv = f"{match.group(0)[:-1]}({match.group(0)[-1]})"`
endsnippet

context "math()"
snippet ov "Overline" i
\overline{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "To The" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet >= "Greater Than Or Equal To" iA
\geq
endsnippet

context "math()"
snippet <= "Less Than Or Equal To" iA
\leq
endsnippet

context "math()"
snippet ln "ln" iA
\Ln
endsnippet

priority 1000
context "math()"
snippet vert "Vertical Line" iA
\vert
endsnippet

priority 10000
snippet \rvert "Right Vertical Line" iA
\rvert
endsnippet

context "math()"
snippet abs "Absolute Value" iA
\lvert ${1:${VISUAL}} \rvert
endsnippet

context "math()"
snippet ++ "Plus / Minus" iA
\pm
endsnippet

priority 1000
context "math()"
snippet -> "To" iA
\to
endsnippet

priority 10000
context "math()"
snippet <-> "Left Right Arrow" iA
\leftrightarrow
endsnippet

priority 1000
context "math()"
snippet => "Right Arrow" iA
\Rightarrow
endsnippet

priority 10000
context "math()"
snippet <=> "Left Right Arrow" iA
\Leftrightarrow
endsnippet

context "math()"
snippet ooo "Infty" iA
\infty
endsnippet

context "math()"
snippet ein "Element of" iA
\in
endsnippet

context "math()"
snippet aa "For All" iA
\forall
endsnippet

context "math()"
snippet gp( "Dynamic () group" iA
\left( $1 \right)$0
endsnippet

context "math()"
snippet gp[ "Dynamic [] group" iA
\left[ $1 \right]$0
endsnippet

context "math()"
snippet bg( "Big () group" iA
\Bigl( $1 \Bigr)$0
endsnippet

context "math()"
snippet bg[ "Big [] group" iA
\Bigl[ $1 \Bigr]$0
endsnippet

context "math()"
snippet bgg( "Bigg () group" iA
\Biggl( $1 \Biggr)$0
endsnippet

context "math()"
snippet bgg[ "Bigg [] group" iA
\Biggl[ $1 \Biggr]$0
endsnippet

context "math()"
snippet pi "Pi" iA
\Pi
endsnippet

context "math()"
snippet theta "Theta" iA
\Theta
endsnippet

context "math()"
snippet beta "Beta" iA
\Beta
endsnippet

context "math()"
snippet alpha "Alpha" iA
\Alpha
endsnippet

context "math()"
snippet gamma "Gamma" iA
\Gamma
endsnippet

context "math()"
snippet delta "Caps Delta" iA
\Delta
endsnippet

priority 1000
context "math()"
snippet sin "Sine" iA
\Sin
endsnippet

priority 1000
context "math()"
snippet cos "Cosine" iA
\Cos
endsnippet

priority 1000
context "math()"
snippet tan "Tangent" iA
\Tan
endsnippet

priority 1000
context "math()"
snippet cot "Cotangent" iA
\Cot
endsnippet

priority 1000
context "math()"
snippet sec "Secant" iA
\Sec
endsnippet

priority 1000
context "math()"
snippet csc "Cosecant" iA
\Csc
endsnippet

priority 10000
context "math()"
snippet arcsin "Arcsine" iA
\Arcsin
endsnippet

priority 10000
context "math()"
snippet arccos "Arccosine" iA
\Arccos
endsnippet

priority 10000
context "math()"
snippet arctan "Arctangent" iA
\Arctan
endsnippet

priority 10000
context "math()"
snippet arccot "Arccotangent" iA
\Arccot
endsnippet

priority 10000
context "math()"
snippet arcsec "Arcsecant" iA
\Arcsec
endsnippet

priority 10000
context "math()"
snippet arccsc "Arccosecant" iA
\Arccsc
endsnippet

priority 1000
context "math()"
snippet sympy "Sympy Block " w
sympy $1 sympy$0
endsnippet

priority 10000
context "math()"
snippet 'sympy(.*)sympy' "Evaluate Sympy Block" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "Mathematica Block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "Evaluate Mathmatica Block" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet plot "Plot / Graph" w
\begin{figure}[!ht]
    \centering
    \begin{tikzpicture}
        \begin{axis}
            \addplot[domain=$1:$2, samples=${5:100}, color=${6:black}]{$7};
        \end{axis}
    \end{tikzpicture}
    \caption{$8}
\end{figure}$0
endsnippet

snippet plotad "Plot / Graph (Advanced)" w
\begin{figure}[!ht]
    \centering
    \begin{tikzpicture}
        \begin{axis}[
            xmin= ${1:-10}, xmax= ${2:10},
            ymin= ${3:-10}, ymax = ${4:10},
            axis lines = middle,
        ]
            \addplot[domain=$1:$2, samples=${5:100}, color=${6:black}]{$7};
        \end{axis}
    \end{tikzpicture}
    \caption{$8}
\end{figure}$0
endsnippet

snippet aplt "Add Plot" w
\addplot[domain=$1:$2, samples=${3:100}, color=${4:black}]{$5};$0
endsnippet
